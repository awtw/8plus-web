[
  {
    "title": "Hello, 8plus!",
    "date": "2025-01-22T00:00:00.000Z",
    "tags": [
      "announcement",
      "introduction"
    ],
    "summary": "Welcome to 8plus - your partner for frontend engineering, UX design, and technical consulting.",
    "thumbnail": "",
    "published": true,
    "protected": false,
    "slug": "hello-8plus-en",
    "locale": "en",
    "html": "<h1>Welcome to 8plus</h1>\n<p>Hello and welcome to <strong>8plus</strong>! We're excited to launch our platform dedicated to frontend engineering, user experience design, and technical consulting.</p>\n<h2>What We Do</h2>\n<p>At 8plus, we specialize in:</p>\n<ul>\n<li><strong>Frontend Development</strong>: Modern web applications using Next.js, React, TypeScript</li>\n<li><strong>Architecture Design</strong>: System architecture, technology selection, code review</li>\n<li><strong>Technical Consulting</strong>: One-on-one guidance, team training, project assessment</li>\n</ul>\n<h2>Our Mission</h2>\n<p>We believe in building high-quality web applications with modern technology stacks while providing professional technical guidance and architectural advice.</p>\n<h2>Get Started</h2>\n<p>Ready to work with us? <a href=\"/booking\">Book a consultation</a> or <a href=\"/projects\">view our projects</a> to see what we can do for you.</p>\n<hr>\n<p><em>This is our first blog post. Stay tuned for more technical insights, development tips, and industry updates!</em></p>",
    "url": "/blog/hello-8plus-en"
  },
  {
    "title": "Hello 8plus - 重新啟動",
    "date": "2025-01-22T00:00:00.000Z",
    "tags": [
      "公告",
      "技術"
    ],
    "summary": "8plus.app 重新上線，採用 Next.js 15 + Velite 架構，專注於工程諮詢和技術分享。",
    "published": true,
    "protected": false,
    "slug": "hello-8plus",
    "locale": "zh-TW",
    "html": "<h1>Hello 8plus - 重新啟動</h1>\n<p>歡迎來到 8plus.app！這是我的工程諮詢和技術分享平台的全新開始。</p>\n<h2>新架構</h2>\n<p>這次重建採用了現代化的技術棧：</p>\n<ul>\n<li><strong>Next.js 15</strong> - 最新的 React 框架</li>\n<li><strong>Velite</strong> - 類型安全的內容管理</li>\n<li><strong>Tailwind CSS</strong> - 現代化的樣式框架</li>\n<li><strong>TypeScript</strong> - 類型安全的開發體驗</li>\n</ul>\n<h2>主要功能</h2>\n<h3>1. 工程諮詢</h3>\n<p>提供專業的軟體工程諮詢服務，包括：</p>\n<ul>\n<li>前端架構設計</li>\n<li>Next.js 應用開發</li>\n<li>技術選型建議</li>\n<li>程式碼審查和優化</li>\n</ul>\n<h3>2. 技術部落格</h3>\n<p>分享技術見解和實踐經驗：</p>\n<ul>\n<li>前端開發最佳實踐</li>\n<li>工程效率提升</li>\n<li>新技術探索</li>\n</ul>\n<h3>3. 專案展示</h3>\n<p>展示過往的技術專案和成果。</p>\n<h3>4. 線上預約</h3>\n<p>透過整合的 Cal.com 系統，可以直接預約諮詢時間。</p>\n<h2>設計理念</h2>\n<p>這次重建的核心理念是<strong>簡潔而強大</strong>：</p>\n<ul>\n<li>專注於內容和功能</li>\n<li>快速的載入速度</li>\n<li>優秀的使用者體驗</li>\n<li>易於維護和擴展</li>\n</ul>\n<h2>未來計畫</h2>\n<ul>\n<li>Phase 2: 新增使用者認證和受保護內容</li>\n<li>多語言支援 (i18n)</li>\n<li>更豐富的互動功能</li>\n</ul>\n<p>感謝關注，期待與你的交流！</p>\n<hr>\n<p><em>如有任何問題或合作意向，歡迎透過預約系統聯繫我。</em></p>",
    "url": "/blog/hello-8plus"
  },
  {
    "title": "Next.js 15 + Velite: Modern Content Management Solution",
    "date": "2025-01-22T00:00:00.000Z",
    "tags": [
      "Next.js",
      "Velite",
      "Architecture"
    ],
    "summary": "Exploring the content management solution combining Next.js 15 with Velite, and why we chose this technology stack.",
    "thumbnail": "",
    "published": true,
    "protected": false,
    "slug": "nextjs-15-velite-en",
    "locale": "en",
    "html": "<h1>Next.js 15 + Velite: Modern Content Management Solution</h1>\n<p>When building 8plus.app, I chose the Next.js 15 + Velite technology combination. This article shares the reasons for choosing this solution and practical experience.</p>\n<h2>Why Choose Velite?</h2>\n<h3>1. Type Safety</h3>\n<p>Velite is based on Zod schema, providing complete TypeScript type support:</p>\n<pre><code class=\"language-typescript\">const posts = defineCollection({\n  name: 'Post',\n  pattern: 'content/posts/**/*.mdx',\n  schema: s.object({\n    title: s.string(),\n    date: s.isodate(),\n    tags: s.array(s.string()).optional(),\n    summary: s.string(),\n    published: s.boolean().default(true),\n    content: s.mdx()\n  })\n})\n</code></pre>\n<h3>2. Simple Yet Powerful</h3>\n<p>Compared to Contentlayer, Velite provides a cleaner API and better performance:</p>\n<ul>\n<li>Faster build times</li>\n<li>Less configuration</li>\n<li>Better error messages</li>\n</ul>\n<h3>3. Next.js 15 Compatibility</h3>\n<p>Velite natively supports Next.js 15, avoiding version compatibility issues.</p>\n<h2>Practical Experience</h2>\n<h3>Configuration File Structure</h3>\n<pre><code class=\"language-typescript\">export default defineConfig({\n  root: '.',\n  output: {\n    data: '.velite',\n    assets: 'public/static',\n    base: '/static/',\n    clean: true\n  },\n  collections: { posts, projects },\n  mdx: {\n    rehypePlugins: [\n      rehypeSlug,\n      [rehypeAutolinkHeadings, { behavior: 'wrap' }]\n    ]\n  }\n})\n</code></pre>\n<h3>Using in React Components</h3>\n<pre><code class=\"language-tsx\">import { posts } from '.velite'\n\nexport default function BlogPage() {\n  const publishedPosts = posts\n    .filter(post => post.published)\n    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n  \n  return (\n    &#x3C;div>\n      {publishedPosts.map(post => (\n        &#x3C;article key={post.slug}>\n          &#x3C;h2>{post.title}&#x3C;/h2>\n          &#x3C;p>{post.summary}&#x3C;/p>\n        &#x3C;/article>\n      ))}\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<h2>Build Process</h2>\n<p>The build process is very simple:</p>\n<pre><code class=\"language-bash\">velite &#x26;&#x26; next build\n</code></pre>\n<p>Velite will:</p>\n<ol>\n<li>Scan MDX files</li>\n<li>Validate frontmatter</li>\n<li>Generate type definitions</li>\n<li>Compile content to JSON</li>\n</ol>\n<h2>Advantages Summary</h2>\n<ol>\n<li><strong>Developer Experience</strong>: Complete type support and intelligent hints</li>\n<li><strong>Performance</strong>: Fast build and runtime performance</li>\n<li><strong>Simplicity</strong>: Minimal configuration, maximum functionality</li>\n<li><strong>Reliability</strong>: Data validation based on Zod</li>\n</ol>\n<h2>Conclusion</h2>\n<p>Next.js 15 + Velite is an excellent modern content management solution, especially suitable for:</p>\n<ul>\n<li>Technical blogs</li>\n<li>Documentation sites</li>\n<li>Project showcases</li>\n<li>Personal websites</li>\n</ul>\n<p>If you're looking for a simple yet powerful content management solution, I highly recommend trying this combination.</p>\n<hr>\n<p><em>Want to learn more technical details? Feel free to book a consultation time for in-depth discussion.</em></p>",
    "url": "/blog/nextjs-15-velite-en"
  },
  {
    "title": "Next.js 15 + Velite: 現代內容管理方案",
    "date": "2025-01-22T00:00:00.000Z",
    "tags": [
      "Next.js",
      "Velite",
      "技術架構"
    ],
    "summary": "探索 Next.js 15 與 Velite 結合的內容管理解決方案，以及為什麼選擇這個技術組合。",
    "published": true,
    "protected": false,
    "slug": "nextjs-15-velite",
    "locale": "zh-TW",
    "html": "<h1>Next.js 15 + Velite: 現代內容管理方案</h1>\n<p>在建構 8plus.app 時，我選擇了 Next.js 15 + Velite 的技術組合。這篇文章分享選擇這個方案的原因和實踐經驗。</p>\n<h2>為什麼選擇 Velite？</h2>\n<h3>1. 類型安全</h3>\n<p>Velite 基於 Zod schema，提供完整的 TypeScript 類型支援：</p>\n<pre><code class=\"language-typescript\">const posts = defineCollection({\n  name: 'Post',\n  pattern: 'content/posts/**/*.mdx',\n  schema: s.object({\n    title: s.string(),\n    date: s.isodate(),\n    tags: s.array(s.string()).optional(),\n    summary: s.string(),\n    published: s.boolean().default(true),\n    content: s.mdx()\n  })\n})\n</code></pre>\n<h3>2. 簡單而強大</h3>\n<p>相比 Contentlayer，Velite 提供了更簡潔的 API 和更好的效能：</p>\n<ul>\n<li>更快的建構速度</li>\n<li>更少的配置</li>\n<li>更好的錯誤提示</li>\n</ul>\n<h3>3. Next.js 15 相容性</h3>\n<p>Velite 原生支援 Next.js 15，避免了版本相容性問題。</p>\n<h2>實踐經驗</h2>\n<h3>配置檔案結構</h3>\n<pre><code class=\"language-typescript\">export default defineConfig({\n  root: '.',\n  output: {\n    data: '.velite',\n    assets: 'public/static',\n    base: '/static/',\n    clean: true\n  },\n  collections: { posts, projects },\n  mdx: {\n    rehypePlugins: [\n      rehypeSlug,\n      [rehypeAutolinkHeadings, { behavior: 'wrap' }]\n    ]\n  }\n})\n</code></pre>\n<h3>在 React 元件中使用</h3>\n<pre><code class=\"language-tsx\">import { posts } from '.velite'\n\nexport default function BlogPage() {\n  const publishedPosts = posts\n    .filter(post => post.published)\n    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n  \n  return (\n    &#x3C;div>\n      {publishedPosts.map(post => (\n        &#x3C;article key={post.slug}>\n          &#x3C;h2>{post.title}&#x3C;/h2>\n          &#x3C;p>{post.summary}&#x3C;/p>\n        &#x3C;/article>\n      ))}\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<h2>建構流程</h2>\n<p>建構流程非常簡單：</p>\n<pre><code class=\"language-bash\">velite &#x26;&#x26; next build\n</code></pre>\n<p>Velite 會：</p>\n<ol>\n<li>掃描 MDX 檔案</li>\n<li>驗證 frontmatter</li>\n<li>生成類型定義</li>\n<li>編譯內容為 JSON</li>\n</ol>\n<h2>優勢總結</h2>\n<ol>\n<li><strong>開發體驗</strong>: 完整的類型支援和智慧提示</li>\n<li><strong>效能</strong>: 快速的建構和執行時效能</li>\n<li><strong>簡潔</strong>: 最少的配置，最大的功能</li>\n<li><strong>可靠</strong>: 基於 Zod 的資料驗證</li>\n</ol>\n<h2>結論</h2>\n<p>Next.js 15 + Velite 是一個優秀的現代內容管理方案，特別適合：</p>\n<ul>\n<li>技術部落格</li>\n<li>文件網站</li>\n<li>專案展示</li>\n<li>個人網站</li>\n</ul>\n<p>如果你正在尋找一個簡單而強大的內容管理解決方案，強烈推薦嘗試這個組合。</p>\n<hr>\n<p><em>想了解更多技術細節？歡迎預約諮詢時間深入討論。</em></p>",
    "url": "/blog/nextjs-15-velite"
  },
  {
    "title": "Responsive Design Best Practices: From Mobile-First to Desktop Adaptation",
    "date": "2025-01-23T00:00:00.000Z",
    "tags": [
      "Responsive Design",
      "CSS",
      "User Experience",
      "Frontend Development"
    ],
    "summary": "A comprehensive guide exploring core principles of responsive web design, from mobile-first strategies to cross-device user experience optimization.",
    "thumbnail": "",
    "published": true,
    "protected": false,
    "slug": "responsive-design-best-practices-en",
    "locale": "en",
    "html": "<h1>Responsive Design Best Practices: From Mobile-First to Desktop Adaptation</h1>\n<p>In modern web development, responsive design is no longer optional—it's essential. With users accessing websites from various devices, we need to ensure quality user experiences across all screen sizes.</p>\n<h2>Mobile-First Design Philosophy</h2>\n<h3>Why Choose Mobile-First?</h3>\n<p>Mobile-first is not just a technical strategy, but a design philosophy:</p>\n<ul>\n<li><strong>Performance Optimization</strong>: Starting with small screens naturally focuses on core functionality and content</li>\n<li><strong>Progressive Enhancement</strong>: Gradually adding features for larger screens rather than removing them</li>\n<li><strong>User Behavior</strong>: Over 60% of website traffic comes from mobile devices</li>\n</ul>\n<h3>Implementing Mobile-First</h3>\n<pre><code class=\"language-css\">/* Base styles (mobile devices) */\n.container {\n  padding: 1rem;\n  max-width: 100%;\n}\n\n/* Tablet devices */\n@media (min-width: 768px) {\n  .container {\n    padding: 2rem;\n    max-width: 768px;\n    margin: 0 auto;\n  }\n}\n\n/* Desktop devices */\n@media (min-width: 1024px) {\n  .container {\n    padding: 3rem;\n    max-width: 1200px;\n  }\n}\n</code></pre>\n<h2>Key Breakpoint Strategy</h2>\n<h3>Common Breakpoint Settings</h3>\n<p>Based on actual device usage patterns, we recommend these breakpoints:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Device Type</th><th>Width Range</th><th>Breakpoint</th></tr></thead><tbody><tr><td>Mobile</td><td>&#x3C; 768px</td><td>Default</td></tr><tr><td>Tablet</td><td>768px - 1023px</td><td><code>md:</code></td></tr><tr><td>Desktop</td><td>1024px - 1279px</td><td><code>lg:</code></td></tr><tr><td>Large Screen</td><td>≥ 1280px</td><td><code>xl:</code></td></tr></tbody></table>\n<h3>Tailwind CSS Practice</h3>\n<pre><code class=\"language-jsx\">&#x3C;div className=\"\n  grid grid-cols-1 gap-4 p-4\n  md:grid-cols-2 md:gap-6 md:p-6\n  lg:grid-cols-3 lg:gap-8 lg:p-8\n  xl:grid-cols-4\n\">\n  {/* Content */}\n&#x3C;/div>\n</code></pre>\n<h2>Responsive Image Handling</h2>\n<h3>Next.js Image Component</h3>\n<pre><code class=\"language-jsx\">import Image from 'next/image'\n\nfunction ResponsiveImage() {\n  return (\n    &#x3C;Image\n      src=\"/hero-image.jpg\"\n      alt=\"Hero Image\"\n      width={1200}\n      height={600}\n      className=\"w-full h-auto\"\n      sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n      priority\n    />\n  )\n}\n</code></pre>\n<h3>Key Optimization Points</h3>\n<ol>\n<li><strong>Proper sizes attribute</strong>: Tell the browser the image display width at different screen sizes</li>\n<li><strong>Priority loading</strong>: Use <code>priority</code> attribute for important images</li>\n<li><strong>Format optimization</strong>: Automatically select WebP or AVIF formats</li>\n</ol>\n<h2>Responsive Typography</h2>\n<h3>Fluid Font Sizes</h3>\n<pre><code class=\"language-css\">.heading {\n  font-size: clamp(1.5rem, 4vw, 3rem);\n  line-height: 1.2;\n}\n\n.body-text {\n  font-size: clamp(1rem, 2.5vw, 1.125rem);\n  line-height: 1.6;\n}\n</code></pre>\n<h3>Readability Optimization</h3>\n<ul>\n<li><strong>Line Length Control</strong>: 45-75 characters per line for optimal reading experience</li>\n<li><strong>Line Height Adjustment</strong>: Use larger line heights on mobile devices (1.6-1.8)</li>\n<li><strong>Contrast</strong>: Ensure sufficient contrast between text and background</li>\n</ul>\n<h2>Interactive Element Adaptation</h2>\n<h3>Touch-Friendly Design</h3>\n<pre><code class=\"language-css\">.button {\n  min-height: 44px; /* Apple's recommended minimum touch target */\n  min-width: 44px;\n  padding: 12px 24px;\n  margin: 8px; /* Sufficient spacing to avoid accidental touches */\n}\n\n.nav-item {\n  padding: 16px; /* Navigation items need larger touch areas */\n}\n</code></pre>\n<h3>Hover State Handling</h3>\n<pre><code class=\"language-css\">/* Only show hover effects on devices that support hovering */\n@media (hover: hover) {\n  .button:hover {\n    background-color: #0056b3;\n    transform: translateY(-2px);\n  }\n}\n</code></pre>\n<h2>Performance Optimization Strategies</h2>\n<h3>Critical Rendering Path</h3>\n<ol>\n<li><strong>Inline Critical CSS</strong>: Styles needed for above-the-fold rendering</li>\n<li><strong>Lazy Load Non-Critical Resources</strong>: Use <code>loading=\"lazy\"</code></li>\n<li><strong>Preload Important Resources</strong>: <code>&#x3C;link rel=\"preload\"></code></li>\n</ol>\n<h3>Code Splitting</h3>\n<pre><code class=\"language-jsx\">// Dynamic component import\nconst HeavyComponent = dynamic(() => import('./HeavyComponent'), {\n  loading: () => &#x3C;div>Loading...&#x3C;/div>,\n  ssr: false // If server-side rendering is not needed\n})\n</code></pre>\n<h2>Testing and Debugging</h2>\n<h3>Development Tools</h3>\n<ol>\n<li><strong>Chrome DevTools</strong>: Device simulation and network throttling</li>\n<li><strong>Lighthouse</strong>: Performance and accessibility assessment</li>\n<li><strong>Real Device Testing</strong>: Actual device testing is irreplaceable</li>\n</ol>\n<h3>Key Metrics</h3>\n<ul>\n<li><strong>First Contentful Paint (FCP)</strong>: &#x3C; 1.8s</li>\n<li><strong>Largest Contentful Paint (LCP)</strong>: &#x3C; 2.5s</li>\n<li><strong>Cumulative Layout Shift (CLS)</strong>: &#x3C; 0.1</li>\n</ul>\n<h2>Case Study: 8plus Website</h2>\n<p>In developing the 8plus website, we adopted the following responsive strategies:</p>\n<h3>Navigation Design</h3>\n<pre><code class=\"language-jsx\">// Desktop navigation\n&#x3C;nav className=\"hidden md:flex items-center space-x-6\">\n  {navigation.map((item) => (\n    &#x3C;Link key={item.href} href={item.href}>\n      {item.name}\n    &#x3C;/Link>\n  ))}\n&#x3C;/nav>\n\n// Mobile navigation\n&#x3C;Sheet>\n  &#x3C;SheetTrigger className=\"md:hidden\">\n    &#x3C;Menu className=\"h-6 w-6\" />\n  &#x3C;/SheetTrigger>\n  &#x3C;SheetContent side=\"right\">\n    {/* Mobile navigation content */}\n  &#x3C;/SheetContent>\n&#x3C;/Sheet>\n</code></pre>\n<h3>Content Layout</h3>\n<pre><code class=\"language-jsx\">&#x3C;div className=\"\n  container py-8 \n  md:py-16\n\">\n  &#x3C;div className=\"\n    grid gap-8 \n    lg:gap-12 \n    md:grid-cols-2\n  \">\n    {/* Responsive grid layout */}\n  &#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<h2>Future Trends</h2>\n<h3>Container Queries</h3>\n<pre><code class=\"language-css\">@container (min-width: 400px) {\n  .card {\n    display: flex;\n    flex-direction: row;\n  }\n}\n</code></pre>\n<h3>New Viewport Units</h3>\n<pre><code class=\"language-css\">.hero {\n  height: 100dvh; /* Dynamic Viewport Height */\n  min-height: 100svh; /* Small Viewport Height */\n}\n</code></pre>\n<h2>Conclusion</h2>\n<p>The key to successful responsive design lies in:</p>\n<ol>\n<li><strong>User-Centered Approach</strong>: Understanding user behavior on different devices</li>\n<li><strong>Performance First</strong>: Ensuring good loading speeds on all devices</li>\n<li><strong>Progressive Enhancement</strong>: Starting with basic functionality and gradually adding complexity</li>\n<li><strong>Continuous Testing</strong>: Validating design effectiveness on real devices</li>\n</ol>\n<p>Responsive design is not a one-time task, but an important aspect that requires continuous attention and optimization throughout the development process.</p>\n<hr>\n<p><em>Want to learn more practical responsive design techniques? Feel free to book a technical consultation where we can discuss your specific projects in depth.</em></p>",
    "url": "/blog/responsive-design-best-practices-en"
  },
  {
    "title": "響應式設計最佳實踐：從移動優先到桌面適配",
    "date": "2025-01-23T00:00:00.000Z",
    "tags": [
      "響應式設計",
      "CSS",
      "用戶體驗",
      "前端開發"
    ],
    "summary": "深入探討響應式網頁設計的核心原則，從移動優先策略到跨設備用戶體驗優化的完整指南。",
    "thumbnail": "",
    "published": true,
    "protected": false,
    "slug": "responsive-design-best-practices",
    "locale": "zh-TW",
    "html": "<h1>響應式設計最佳實踐：從移動優先到桌面適配</h1>\n<p>在現代網頁開發中，響應式設計已經不再是可選項，而是必需品。隨著用戶使用各種設備訪問網站，我們需要確保在所有螢幕尺寸上都能提供優質的用戶體驗。</p>\n<h2>移動優先的設計理念</h2>\n<h3>為什麼選擇移動優先？</h3>\n<p>移動優先（Mobile First）不僅僅是一種技術策略，更是一種設計哲學：</p>\n<ul>\n<li><strong>性能優化</strong>：從小螢幕開始設計，自然會關注核心功能和內容</li>\n<li><strong>漸進增強</strong>：逐步為更大的螢幕添加功能，而不是削減功能</li>\n<li><strong>用戶行為</strong>：超過 60% 的網站流量來自移動設備</li>\n</ul>\n<h3>實踐移動優先</h3>\n<pre><code class=\"language-css\">/* 基礎樣式（移動設備） */\n.container {\n  padding: 1rem;\n  max-width: 100%;\n}\n\n/* 平板設備 */\n@media (min-width: 768px) {\n  .container {\n    padding: 2rem;\n    max-width: 768px;\n    margin: 0 auto;\n  }\n}\n\n/* 桌面設備 */\n@media (min-width: 1024px) {\n  .container {\n    padding: 3rem;\n    max-width: 1200px;\n  }\n}\n</code></pre>\n<h2>關鍵斷點策略</h2>\n<h3>常用斷點設置</h3>\n<p>基於實際設備使用情況，建議使用以下斷點：</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>設備類型</th><th>寬度範圍</th><th>斷點</th></tr></thead><tbody><tr><td>手機</td><td>&#x3C; 768px</td><td>預設</td></tr><tr><td>平板</td><td>768px - 1023px</td><td><code>md:</code></td></tr><tr><td>桌面</td><td>1024px - 1279px</td><td><code>lg:</code></td></tr><tr><td>大螢幕</td><td>≥ 1280px</td><td><code>xl:</code></td></tr></tbody></table>\n<h3>Tailwind CSS 實踐</h3>\n<pre><code class=\"language-jsx\">&#x3C;div className=\"\n  grid grid-cols-1 gap-4 p-4\n  md:grid-cols-2 md:gap-6 md:p-6\n  lg:grid-cols-3 lg:gap-8 lg:p-8\n  xl:grid-cols-4\n\">\n  {/* 內容 */}\n&#x3C;/div>\n</code></pre>\n<h2>圖片響應式處理</h2>\n<h3>Next.js Image 組件</h3>\n<pre><code class=\"language-jsx\">import Image from 'next/image'\n\nfunction ResponsiveImage() {\n  return (\n    &#x3C;Image\n      src=\"/hero-image.jpg\"\n      alt=\"Hero Image\"\n      width={1200}\n      height={600}\n      className=\"w-full h-auto\"\n      sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n      priority\n    />\n  )\n}\n</code></pre>\n<h3>關鍵優化點</h3>\n<ol>\n<li><strong>適當的 sizes 屬性</strong>：告訴瀏覽器在不同螢幕尺寸下圖片的顯示寬度</li>\n<li><strong>優先載入</strong>：重要圖片使用 <code>priority</code> 屬性</li>\n<li><strong>格式優化</strong>：自動選擇 WebP 或 AVIF 格式</li>\n</ol>\n<h2>字體與排版響應式</h2>\n<h3>流體字體大小</h3>\n<pre><code class=\"language-css\">.heading {\n  font-size: clamp(1.5rem, 4vw, 3rem);\n  line-height: 1.2;\n}\n\n.body-text {\n  font-size: clamp(1rem, 2.5vw, 1.125rem);\n  line-height: 1.6;\n}\n</code></pre>\n<h3>可讀性優化</h3>\n<ul>\n<li><strong>行長控制</strong>：每行 45-75 個字符為最佳閱讀體驗</li>\n<li><strong>行高調整</strong>：移動設備使用較大的行高（1.6-1.8）</li>\n<li><strong>對比度</strong>：確保文字與背景有足夠的對比度</li>\n</ul>\n<h2>交互元素適配</h2>\n<h3>觸控友好設計</h3>\n<pre><code class=\"language-css\">.button {\n  min-height: 44px; /* Apple 建議的最小觸控目標 */\n  min-width: 44px;\n  padding: 12px 24px;\n  margin: 8px; /* 足夠的間距避免誤觸 */\n}\n\n.nav-item {\n  padding: 16px; /* 導航項目需要更大的觸控區域 */\n}\n</code></pre>\n<h3>懸停狀態處理</h3>\n<pre><code class=\"language-css\">/* 只在支持懸停的設備上顯示懸停效果 */\n@media (hover: hover) {\n  .button:hover {\n    background-color: #0056b3;\n    transform: translateY(-2px);\n  }\n}\n</code></pre>\n<h2>性能優化策略</h2>\n<h3>關鍵渲染路徑</h3>\n<ol>\n<li><strong>內聯關鍵 CSS</strong>：首屏渲染所需的樣式</li>\n<li><strong>延遲載入非關鍵資源</strong>：使用 <code>loading=\"lazy\"</code></li>\n<li><strong>預載入重要資源</strong>：<code>&#x3C;link rel=\"preload\"></code></li>\n</ol>\n<h3>代碼分割</h3>\n<pre><code class=\"language-jsx\">// 動態導入組件\nconst HeavyComponent = dynamic(() => import('./HeavyComponent'), {\n  loading: () => &#x3C;div>載入中...&#x3C;/div>,\n  ssr: false // 如果不需要服務端渲染\n})\n</code></pre>\n<h2>測試與調試</h2>\n<h3>開發工具</h3>\n<ol>\n<li><strong>Chrome DevTools</strong>：設備模擬和網路節流</li>\n<li><strong>Lighthouse</strong>：性能和可用性評估</li>\n<li><strong>Real Device Testing</strong>：實際設備測試不可替代</li>\n</ol>\n<h3>關鍵指標</h3>\n<ul>\n<li><strong>First Contentful Paint (FCP)</strong>：&#x3C; 1.8s</li>\n<li><strong>Largest Contentful Paint (LCP)</strong>：&#x3C; 2.5s</li>\n<li><strong>Cumulative Layout Shift (CLS)</strong>：&#x3C; 0.1</li>\n</ul>\n<h2>實戰案例：8plus 網站</h2>\n<p>在 8plus 網站的開發中，我們採用了以下響應式策略：</p>\n<h3>導航設計</h3>\n<pre><code class=\"language-jsx\">// 桌面版導航\n&#x3C;nav className=\"hidden md:flex items-center space-x-6\">\n  {navigation.map((item) => (\n    &#x3C;Link key={item.href} href={item.href}>\n      {item.name}\n    &#x3C;/Link>\n  ))}\n&#x3C;/nav>\n\n// 移動版導航\n&#x3C;Sheet>\n  &#x3C;SheetTrigger className=\"md:hidden\">\n    &#x3C;Menu className=\"h-6 w-6\" />\n  &#x3C;/SheetTrigger>\n  &#x3C;SheetContent side=\"right\">\n    {/* 移動導航內容 */}\n  &#x3C;/SheetContent>\n&#x3C;/Sheet>\n</code></pre>\n<h3>內容佈局</h3>\n<pre><code class=\"language-jsx\">&#x3C;div className=\"\n  container py-8 \n  md:py-16\n\">\n  &#x3C;div className=\"\n    grid gap-8 \n    lg:gap-12 \n    md:grid-cols-2\n  \">\n    {/* 響應式網格佈局 */}\n  &#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<h2>未來趨勢</h2>\n<h3>Container Queries</h3>\n<pre><code class=\"language-css\">@container (min-width: 400px) {\n  .card {\n    display: flex;\n    flex-direction: row;\n  }\n}\n</code></pre>\n<h3>新的視口單位</h3>\n<pre><code class=\"language-css\">.hero {\n  height: 100dvh; /* Dynamic Viewport Height */\n  min-height: 100svh; /* Small Viewport Height */\n}\n</code></pre>\n<h2>總結</h2>\n<p>響應式設計的成功關鍵在於：</p>\n<ol>\n<li><strong>以用戶為中心</strong>：理解不同設備上的用戶行為</li>\n<li><strong>性能優先</strong>：確保在所有設備上都有良好的載入速度</li>\n<li><strong>漸進增強</strong>：從基礎功能開始，逐步增加複雜性</li>\n<li><strong>持續測試</strong>：在真實設備上驗證設計效果</li>\n</ol>\n<p>響應式設計不是一次性的工作，而是需要在整個開發過程中持續關注和優化的重要環節。</p>\n<hr>\n<p><em>想了解更多響應式設計的實踐技巧？歡迎預約技術諮詢，我們可以針對你的具體項目進行深入討論。</em></p>",
    "url": "/blog/responsive-design-best-practices"
  }
]